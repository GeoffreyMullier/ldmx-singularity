Bootstrap: localimage
From: ldmx-buildenv.sif
Stage: buildldmx

%setup
  # local LDMX sources
  cp -a src/ldmx-git ${SINGULARITY_ROOTFS}/src/ldmx-git
  # local MagFieldMap instead of buildtime checkout
  #cp -a src/MagFieldMap ${SINGULARITY_ROOTFS}/src/ldmx-git/
  #sed '/git submodule/s/^/#/' -i ${SINGULARITY_ROOTFS}/src/ldmx-git/cmake/Scripts/InstallMagFieldMap.cmake
  # versions
  cp -f ldmx.buildvers ${SINGULARITY_ROOTFS}/etc

%post
  source /etc/ldmx.buildvers

  if [ -n "$MARCH" ]; then
    export CFLAGS="-march=$MARCH"
    export CXXFLAGS="-march=$MARCH"
  fi

  if [ "$DEVTOOLSET" != "S" ]; then
    source /opt/rh/devtoolset-${DEVTOOLSET}/enable
  fi

  #source /opt/rh/
  export XERCESC_DIR=/opt/xerces-c-$XERCES_VER
  export G4DIR=/opt/geant4-$GEANT4_TAG
  export ROOTDIR=/opt/root-$ROOTVERSION
  export PYTHONDIR=/opt/python${PYTHON_VER:0:3}
  #for python
  export PATH=$PYTHONDIR/bin:$PATH
  export LD_LIBRARY_PATH=$PYTHONDIR/lib:$LD_LIBRARY_PATH

  #for boost
  export BOOSTDIR=/opt/boost-${BOOST_VER//[.]/_}
  export LD_LIBRARY_PATH=$BOOSTDIR/lib:$LD_LIBRARY_PATH

  if [ ${ONNX_GPU} == "ON" ]; then 
  export ONNX_DIR=/opt/onnxruntime-linux-x64-gpu-$ONNX_VER
  fi
  if [ ${ONNX_GPU} == "OFF" ]; then
  export ONNX_DIR=/opt/onnxruntime-linux-x64-$ONNX_VER
  fi

  cd /buildroot

  # Build LDMX
  yum -y install boost-devel
  #source /opt/rh/rh-python36/enable bash
  pip3 install xgboost  
  pip3 install uproot
  mv /src/ldmx-git .
  cd ldmx-git
  #SHAREGEX="\b[0-9a-f]{5,40}\b"
  #[[ $LDMX_TAG =~ $SHAREGEX ]]
  #if [ -z ${BASH_REMATCH[0]} ]; then
  #git checkout $LDMX_TAG -b ldmx-build
  if [ "$LDMX_TAG" != "latest" ]; then
  git checkout tags/$LDMX_TAG -b $LDMX_TAG
  git submodule update --init --recursive
  else
  git checkout master
  git submodule update --init --recursive
  fi
  # fix Config and Detectors install
  #mkdir Configuration/{include,src}
  #mkdir Detectors/{include,src}
  # build
  mkdir build
  cd build
  source /opt/root-$ROOTVERSION/bin/thisroot.sh
  export LDMXDIR=/opt/ldmx-$LDMX_TAG
  #cmake -DGeant4_DIR=$G4DIR -DXercesC_DIR=$XERCESC_DIR -DXercesC_INCLUDE_DIR=$XERCESC_DIR/include -DPYTHON_EXECUTABLE=/usr/bin/python -DROOT_DIR=$ROOTDIR -DONNXRUNTIME_ROOT=$ONNX_DIR -DCMAKE_INSTALL_PREFIX=$LDMXDIR ..
  #cmake -DGeant4_DIR=$G4DIR -DXercesC_DIR=$XERCESC_DIR -DXercesC_INCLUDE_DIR=$XERCESC_DIR/include -DPYTHON_EXECUTABLE=/opt/rh/rh-python36/root/usr/bin/python -DROOT_DIR=$ROOTDIR -DONNXRUNTIME_ROOT=$ONNX_DIR -DCMAKE_INSTALL_PREFIX=$LDMXDIR ..
  cmake -DGeant4_DIR=$G4DIR -DXercesC_DIR=$XERCESC_DIR -DXercesC_INCLUDE_DIR=$XERCESC_DIR/include -DPYTHON_EXECUTABLE=$PYTHONDIR/bin/python3 -DROOT_DIR=$ROOTDIR -DONNXRUNTIME_ROOT=$ONNX_DIR  -DCMAKE_INSTALL_PREFIX=$LDMXDIR ..
  make $MAKEOPTS
  make install
  # add marcros examples to install tree
  # cp -a ../SimApplication/macros $LDMXDIR/data/
  cd /buildroot

  # define environment
  LDMX_ENV_FILE=/etc/ldmxenv.sh
  if [ "$DEVTOOLSET" != "S" ]; then
    echo "source /opt/rh/devtoolset-$DEVTOOLSET/enable" >> $LDMX_ENV_FILE
  fi
  #echo "source /opt/rh/rh-python36/enable" >> $LDMX_ENV_FILE
  echo "export LDMXSW_DIR=$LDMXDIR" >> $LDMX_ENV_FILE
  echo "export PATH=$LDMXDIR/bin:$PYTHONDIR/bin:$PATH" >> $LDMX_ENV_FILE
  echo "source $G4DIR/bin/geant4.sh" >> $LDMX_ENV_FILE
  echo "source $ROOTDIR/bin/thisroot.sh" >> $LDMX_ENV_FILE
  echo "export LD_LIBRARY_PATH=$LDMXDIR/lib:$XERCESC_DIR/lib:$ONNX_DIR/lib:$PYTHONDIR/lib:$BOOSTDIR/lib:/opt/geant4-${GEANT4_TAG}/lib64:$LD_LIBRARY_PATH" >> $LDMX_ENV_FILE
  echo "export PYTHONPATH=$LDMXDIR/lib/python:$PYTHONDIR/lib:$PYTHONPATH" >> $LDMX_ENV_FILE
  #echo "export PATH=$LDMXDIR/bin:$PATH" >> $LDMX_ENV_FILE
  #echo "export PATH=$PYTHONDIR/bin:$PATH" >> $LDMX_ENV_FILE
  #echo "export LD_LIBRARY_PATH=$PYTHONDIR/lib:$LD_LIBRARY_PATH" >> $LDMX_ENV_FILE
  #echo "export LD_LIBRARY_PATH=$BOOSTDIR/lib:$LD_LIBRARY_PATH" >> $LDMX_ENV_FILE

  # cleanup (cmake files that prevent copy)
  rm -rf $G4DIR/lib64/Geant4*
  
%environment
  source /etc/ldmxenv.sh

Bootstrap: localimage
From: centos.sif
Stage: deploy

%files from buildldmx
  /etc/ldmx.buildvers
  /etc/ldmxenv.sh
  /opt/xerces* /opt/
  /opt/geant4* /opt/
  /opt/root* /opt/
  /opt/onnxruntime* /opt/
  /opt/ldmx* /opt/
  /opt/python* /opt/
  /opt/boost* /opt/

%post
  source /etc/ldmx.buildvers
  yum -y install epel-release vim-enhanced boost boost-thread boost-devel
  if [ "$DEVTOOLSET" != "S" ]; then
    # complete gcc toolset is needed for runtime compilations
    yum -y install centos-release-scl-rh
    yum -y install devtoolset-${DEVTOOLSET}-runtime devtoolset-${DEVTOOLSET}-gcc devtoolset-${DEVTOOLSET}-gcc-c++
  else
    yum -y install gcc gcc-c++
  fi
  # libs
  yum -y install openssl libX11 libXmu mesa-libGL mesa-libGLU mesa-libGLw libXpm libXft libXext gsl libglvnd-opengl fftw blas boost
  # extra python
  #yum -y install rh-python36
  #yum -y install rh-python36-numpy rh-python36-scipy rh-python36-python-tools rh-python36-python-six rh-python36-PyYAML
  #source /opt/rh/rh-python36/enable
  source /opt/root-${ROOTVERSION}/bin/thisroot.sh
  source /opt/geant4-${GEANT4_TAG}/bin/geant4.sh
  export PATH=/opt/python${PYTHON_VER:0:3}/bin:/opt/ldmx${LDMX_TAG}/bin:$PATH
  export LD_LIBRARY_PATH=/opt/python${PYTHON_VER:0:3}/lib:/opt/boost-${BOOST_VER//[.]/_}/lib:/opt/ldmx${LDMX_TAG}/lib:/opt/geant4-${GEANT4_TAG}/lib64:$LD_LIBRARY_PATH
  
  #export LD_LIBRARY_PATH=/opt/boost-${BOOST_VER//[.]/_}/lib:$LD_LIBRARY_PATH
  #export LD_LIBRARY_PATH=/opt/ldmx${LDMX_TAG}/lib:$LD_LIBRARY_PATH
  #export PATH=/opt/ldmx${LDMX_TAG}/bin:$PATH

  pip3 install uproot
  pip3 install lz4
  pip3 install zstd
  pip3 install xxhash
  #pip install lzma
  #pip install xrootd
  pip3 install requests
  pip3 install pandas
  #yum -y install numpy scipy python-pip
  pip3 install xgboost
  #pip install uproot
  # satisfy ldmx buildroot hardcode for runtime includes
  for d in $( ls -1 /opt/ldmx-${LDMX_TAG}/include ); do
    mkdir -p /buildroot/ldmx-git/$d
    ln -s /opt/ldmx-${LDMX_TAG}/include /buildroot/ldmx-git/$d/
  done

%environment
  export MALLOC_CHECK_=0
  source /etc/ldmxenv.sh

#test
  source /etc/ldmxenv.sh
#  TESTDIR=$( mktemp -d -p . -t ldmx.test.XXXXXX )
#  cd $TESTDIR
#  cp $LDMXSW_DIR/data/detectors/ldmx-det-full-v3-fieldmap-magnet/* .
#  cp $LDMXSW_DIR/data/fieldmap/* .
#  echo "/persistency/gdml/read detector.gdml" > run.mac
#  echo "/run/initialize" >> run.mac
#  echo "/gun/particle e-" >> run.mac
#  echo "/gun/energy 4 GeV" >> run.mac
#  echo "/gun/position -27.926 5 -700 mm" >> run.mac
#  echo "/gun/direction 0.3138 0 3.9877 GeV" >> run.mac
#  echo "/run/beamOn 1000" >> run.mac
#  ldmx-sim run.mac
#  if [ -f "ldmx_sim_events.root" ]; then
#    echo "LDMX test simulation completed."
#  else
#    echo "LDMX test simulation failed."
#  fi
#  cd - >/dev/null 2>&1
#  rm -rf $TESTDIR

%runscript
  #exec ldmx-app "$@"
  exec fire "$@"
%labels
  Description LDMX Software Singularity Image
  Maintainer Andrii Salnikov <andrii.salnikov@hep.lu.se>, Geoffrey Mullier <geoffrey.mullier@hep.lu.se>

%help
   LDMX Software Singularity Image. 
   The ldmx-sim command is run by default, e.g.
     #singularity run ldmx_<version>.sif run.mac
     singularity run ldmx_<version>.sif Script.py
   or
     #./ldmx_<version>.sif run.mac
      ./ldmx_<version>.sif Script.py
     
   For other commands use singularity exec: 
     #singularity exec ldmx_<version>.sif ldmx-app <options>
     singularity exec ldmx_<version>.sif fire <options>

