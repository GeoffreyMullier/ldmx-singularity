Bootstrap: localimage
From: centos.sif
Stage: build

%setup
  mkdir ${SINGULARITY_ROOTFS}/src/
  # local LDMX-patched GEANT4 sources
  cp -a src/ldmx-geant4 ${SINGULARITY_ROOTFS}/src/ldmx-geant4
  # versions
  cp ldmx.buildvers ${SINGULARITY_ROOTFS}/etc

%post
  source /etc/ldmx.buildvers

  yum -y install centos-release-scl
  yum -y install @development
  yum -y install wget openssl-devel epel-release git
  yum -y install boost-devel
  yum -y install vim
  yum -y install mesa-libGLw-devel.x86_64
  yum -y install emacs
  yum -y install gdbm-devel tk-devel xz-devel sqlite-devel readline-devel bzip2-devel ncurses-devel zlib=devel libffi-devel

  # devtoolset
  if [ "${DEVTOOLSET}" != "S" ]; then
    yum -y install centos-release-scl-rh
    yum -y install devtoolset-${DEVTOOLSET}-gcc devtoolset-${DEVTOOLSET}-gcc-c++
    source /opt/rh/devtoolset-${DEVTOOLSET}/enable
  fi

  mkdir /buildroot
  cd /buildroot

   ##Make Python

   wget --no-check-certificate https://www.python.org/ftp/python/${PYTHON_VER}/Python-${PYTHON_VER}.tgz
   tar -xzvf Python-${PYTHON_VER}.tgz
   PYTHON_VER_SHORT=${PYTHON_VER:0:3};
   PYTHON_VER_SHORTER=${PYTHON_VER:0:1};
   PYTHON_DIR=/opt/python${PYTHON_VER_SHORT}

   cd Python-${PYTHON_VER}/
   ./configure --prefix=/opt/python${PYTHON_VER_SHORT} --enable-optimizations --with-ensurepip=install --with-cxx-main=gcc --enable-shared
   
   make $MAKEOPTS && make install
   cd /buildroot

  export PATH=${PYTHON_DIR}/bin:$PATH
  export LD_LIBRARY_PATH=${PYTHON_DIR}/lib:$LD_LIBRARY_PATH

  pip3 install numpy
  pip3 install scipy
  pip3 install six
  pip3 install uproot
  pip3 install lz4
  pip3 install zstd
  pip3 install xxhash
  ##pip3 install xrootd
  pip3 install xgboost
  pip3 install requests
  pip3 install pandas 

  # New CMake is needed
  wget https://cmake.org/files/v${CMAKE_VER%.*}/cmake-${CMAKE_VER}.tar.gz
  tar zxvf cmake-$CMAKE_VER.tar.gz
  cd cmake-$CMAKE_VER
  ./bootstrap --prefix=/usr/local
  make $MAKEOPTS
  make install
  cd /buildroot

  # processor optimization flags
  if [ -n "$MARCH" ]; then
    export CFLAGS="-march=$MARCH"
    export CXXFLAGS="-march=$MARCH"
  fi

 # Build Boost
  wget https://dl.bintray.com/boostorg/release/${BOOST_VER}/source/boost_${BOOST_VER//[.]/_}.tar.bz2
  tar -jxvf boost_${BOOST_VER//[.]/_}.tar.bz2
  export BOOST_DIR=/opt/boost-${BOOST_VER//[.]/_}
  cd boost_${BOOST_VER//[.]/_}
  ./bootstrap.sh --prefix=$BOOST_DIR --with-python=${PYTHON_DIR}/bin/python${PYTHON_VER_SHORTER} --with-python-version=${PYTHON_VER_SHORT} --with-python-root=${PYTHON_DIR}

  ./b2 $MAKEOPTS --enable-unicode=ucs4 install --prefix=$BOOST_DIR --with=all
  cd /buildroot

  # Build xerces
  XERCES_VER_SHORT=${XERCES_VER:0:1}
  wget https://archive.apache.org/dist/xerces/c/${XERCES_VER_SHORT}/sources/xerces-c-${XERCES_VER}.tar.bz2
  tar -jxvf xerces-c-${XERCES_VER}.tar.bz2
  export XERCESC_DIR=/opt/xerces-c-$XERCES_VER
  cd xerces-c-${XERCES_VER}
  ./configure --prefix=$XERCESC_DIR
  make $MAKEOPTS
  make install
  cd /buildroot

  # Build GEANT-4
  yum -y install libX11-devel libXmu-devel mesa-libGL-devel mesa-libGLU-devel mesa-libGLw-devel 
  # LDMX uses a custom version of Geant4 that includes modifications to the range 
  # in which the Bertini Cascade model can be used
  mv /src/ldmx-geant4 .
  cd ldmx-geant4
  git checkout tags/$GEANT4_TAG -b $GEANT4_TAG
  mkdir build
  cd build
  export G4DIR=/opt/geant4-$GEANT4_TAG
  cmake -DGEANT4_USE_GDML=ON -DGEANT4_INSTALL_DATA=ON -DXERCESC_ROOT_DIR=$XERCESC_DIR \
    -DGEANT4_USE_OPENGL_X11=ON -DCMAKE_INSTALL_PREFIX=$G4DIR -DGEANT4_USE_SYSTEM_EXPAT=OFF ..
  make $MAKEOPTS
  make install
  cd /buildroot

  # Build ROOT
  PYCMAKEFLAGS="-Dpython3=ON -DPYTHON_EXECUTABLE=${PYTHON_DIR}/bin/python${PYTHON_VER_SHORTER} -DPYTHON_INCLUDE_DIR=${PYTHON_DIR}/include/python${PYTHON_VER_SHORT}/ -DPYTHON_LIBRARY=${PYTHON_DIR}/lib/libpython3.so"
  PYBASE=
  if [ "$CENTOS" == 8 ]; then
    PYBASE=3
    PYDEVPKG="python36-devel"
    PYCMAKEFLAGS="-Dpython3=ON -DPYTHON_EXECUTABLE=/usr/bin/python3 -DPYTHON_INCLUDE_DIR=/usr/include/python3.6m/ -DPYTHON_LIBRARY=/usr/lib64/python3.6"
  fi
  yum -y install libXpm-devel libXft-devel libXext-devel gsl-devel fftw-devel blas-devel
  wget https://root.cern.ch/download/root_v$ROOTVERSION.source.tar.gz
  tar -zxvf root_v$ROOTVERSION.source.tar.gz
  mkdir root-cmake-build
  cd root-cmake-build
  export ROOTDIR=/opt/root-$ROOTVERSION
  cmake -Dgdml=ON -Dexplicitlink=ON ${PYCMAKEFLAGS} -DCMAKE_INSTALL_PREFIX=$ROOTDIR -Dcxx17=ON ../root-$ROOTVERSION
  make $MAKEOPTS
  make install
  cd /buildroot

# Get ONNX runtime Binaries
  if [ ${ONNX_GPU} == "ON" ]; then
  wget https://github.com/microsoft/onnxruntime/releases/download/v${ONNX_VER}/onnxruntime-linux-x64-gpu-${ONNX_VER}.tgz
  tar zxvf onnxruntime-linux-x64-gpu-${ONNX_VER}.tgz
  mv onnxruntime-linux-x64-gpu-${ONNX_VER} /opt/
  ONNX_DIR=/opt/onnxruntime-linux-x64-gpu-$ONNX_VER
  fi
  if [ ${ONNX_GPU} == "OFF" ]; then
  wget https://github.com/microsoft/onnxruntime/releases/download/v${ONNX_VER}/onnxruntime-linux-x64-${ONNX_VER}.tgz
  tar zxvf onnxruntime-linux-x64-${ONNX_VER}.tgz
  mv onnxruntime-linux-x64-${ONNX_VER} /opt/
  ONNX_DIR=/opt/onnxruntime-linux-x64-$ONNX_VER
  fi


  # define environment
  if [ "$DEVTOOLSET" != "S" ]; then
    echo "source /opt/rh/devtoolset-$DEVTOOLSET/enable" >> $SINGULARITY_ENVIRONMENT
  fi
  echo "export PATH=${PYTHON_DIR}/bin:$PATH" >> $SINGULARITY_ENVIRONMENT
  echo "export LD_LIBRARY_PATH=${PYTHON_DIR}/lib:$LD_LIBRARY_PATH" >> $SINGULARITY_ENVIRONMENT
  echo "export ROOTDIR=/opt/root-$ROOTVERSION" >> $SINGULARITY_ENVIRONMENT
  echo "export G4DIR=/opt/geant4-$GEANT4_TAG" >> $SINGULARITY_ENVIRONMENT
  echo "export XERCESC_DIR=/opt/xerces-c-$XERCES_VER" >> $SINGULARITY_ENVIRONMENT
  echo "export LD_LIBRARY_PATH=${BOOST_DIR}/lib:$LD_LIBRARY_PATH" >> $SINGULARITY_ENVIRONMENT
  echo "export BOOST_DIR=/opt/boost-${BOOST_VER//[.]/_}" >> $SINGULARITY_ENVIRONMENT
  if [ ${ONNX_GPU} == "ON" ]; then
  echo "export ONNX_DIR=/opt/onnxruntime-linux-x64-gpu-$ONNX_VER" >> $SINGULARITY_ENVIRONMENT
  fi
  if [ ${ONNX_GPU} == "OFF" ]; then
  echo "export ONNX_DIR=/opt/onnxruntime-linux-x64-$ONNX_VER" >> $SINGULARITY_ENVIRONMENT
  fi

#rm -rf /buildroot
#mkdir /afs

%labels
  Description Singularity Image with build environment for LDMX software
  Maintainers Andrii Salnikov <andrii.salnikov@hep.lu.se>, Geoffrey Mullier <geoffrey.mullier@hep.lu.se>

%help
   Singularity Image with build environment for LDMX software.
   It contains pre-built Xerces-C, Geant4 (patched LDMX version), ONNXruntime and ROOT.

   LDMX software can be build based on this image.

